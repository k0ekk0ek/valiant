#check exclude_from_spf {
#  type = pgsql
#  host = localhost
#  port = 5432
#  database = mail
#  query = "SELECT bs FROM shit WHERE origin = '%sender%' LIMIT 1;"
#  # Invert can only be specified if weight is specified.
#  invert = <yes|no>
#  # Result is used as weight unless weight is explicitly defined here.
#  weight = <float>
#}
#
#check dubious_senders {
#  # Berkeley DB
#  type = hash
#  member = sender
#  path = /etc/valiant/dubious_senders
#  # weight = 1.0
#}
#
#check scamnailer {
#  # Perl Compatible Regular Expressions
#  # List of addresses used in spear phishing attacks.
#  # See http://www.scamnailer.info/
#  type = pcre
#  member = sender
#  # When "path" is specified Postfix like behaviour is enabled for the map!!!!!
#  # otherwise the user must specify a pattern
#  # >> YEAH, this is going to be a problem... because this needs to be async,
#  # while the other variant isn't!!!!
#  path = /etc/valiant/scamnailer
#}
#
#check client_is_dynamic {
#  type = pcre
#  member = client_name
#  pattern = /[_\.\-]([axt]{0,1}dsl|br(e|oa)dband|ppp|pppoe|dynamic|dynip|ADSL|dial(up|in)|pool|dhcp|leased|cpe)[_\.\-]/
#  weight = 1.5
#}
#
#check spf {
#  type = spf
#}
#stage {
#
#  audit {
#    check = spf
#    require = exclude_from_spf
#  }
#
#  audit {
#    check = spamhaus
#  }
#}
#
#
#dict helo_name_is_localhost {
#	type = str
#	member = helo_name
#	pattern = localhost
#	weight = 1.5
#}

#
# stage {
#   check {
#     dict = spamhaus
#     require =
#   }
# }
#
# stage {
#   check {
#     dict = scamnailer
#     require =
#   }
#
#   check {
#     dict = spf
#     require =
#   }
# }
#

dict spamhaus {
	type = dnsbl
	zone = zen.spamhaus.org
	in 127.0.0.4/32 {
		weight = 1.5
	}
	weight = 1.0
}

#dict spf {
#	type = spf
#	fail {
#		weight = 4.5
#	}
#	soft_fail {
#		weight = 1.5
#	}
#	neutral {
#		weight = 0.5
#	}
#	# Default weight if not specified for specific check.
#	weight = 0.0
#}
#
#dict dubious_senders {
#	type = hash
#	path = dubious_senders.db
#	member = sender
#	invert = no
#	#weight = 2.5
#}

dict scamnailer {
	type = pcre
	# pattern has precendence over path
	path = scamnailer
	member = sender
#	pattern = "demu.nl$"
#	invert = no
#	weight = -3.5
}
